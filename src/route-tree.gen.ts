/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as AppIndexRouteImport } from './pages/_app/index'
import { Route as AppLiveRouteImport } from './pages/_app/live'
import { Route as AppDoeRouteImport } from './pages/_app/doe'
import { Route as AppCatalogoAcampamentoRouteImport } from './pages/_app/catalogo-acampamento'
import { Route as AppCalendarRouteImport } from './pages/_app/calendar'
import { Route as AppAcampamentoRouteImport } from './pages/_app/acampamento'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLiveRoute = AppLiveRouteImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppDoeRoute = AppDoeRouteImport.update({
  id: '/doe',
  path: '/doe',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppCatalogoAcampamentoRoute = AppCatalogoAcampamentoRouteImport.update({
  id: '/catalogo-acampamento',
  path: '/catalogo-acampamento',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppCalendarRoute = AppCalendarRouteImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppAcampamentoRoute = AppAcampamentoRouteImport.update({
  id: '/acampamento',
  path: '/acampamento',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/acampamento': typeof AppAcampamentoRoute
  '/calendar': typeof AppCalendarRoute
  '/catalogo-acampamento': typeof AppCatalogoAcampamentoRoute
  '/doe': typeof AppDoeRoute
  '/live': typeof AppLiveRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/acampamento': typeof AppAcampamentoRoute
  '/calendar': typeof AppCalendarRoute
  '/catalogo-acampamento': typeof AppCatalogoAcampamentoRoute
  '/doe': typeof AppDoeRoute
  '/live': typeof AppLiveRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth': typeof AuthLayoutRoute
  '/_app/acampamento': typeof AppAcampamentoRoute
  '/_app/calendar': typeof AppCalendarRoute
  '/_app/catalogo-acampamento': typeof AppCatalogoAcampamentoRoute
  '/_app/doe': typeof AppDoeRoute
  '/_app/live': typeof AppLiveRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/acampamento'
    | '/calendar'
    | '/catalogo-acampamento'
    | '/doe'
    | '/live'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/acampamento'
    | '/calendar'
    | '/catalogo-acampamento'
    | '/doe'
    | '/live'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/acampamento'
    | '/_app/calendar'
    | '/_app/catalogo-acampamento'
    | '/_app/doe'
    | '/_app/live'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/live': {
      id: '/_app/live'
      path: '/live'
      fullPath: '/live'
      preLoaderRoute: typeof AppLiveRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/doe': {
      id: '/_app/doe'
      path: '/doe'
      fullPath: '/doe'
      preLoaderRoute: typeof AppDoeRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/catalogo-acampamento': {
      id: '/_app/catalogo-acampamento'
      path: '/catalogo-acampamento'
      fullPath: '/catalogo-acampamento'
      preLoaderRoute: typeof AppCatalogoAcampamentoRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/calendar': {
      id: '/_app/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof AppCalendarRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/acampamento': {
      id: '/_app/acampamento'
      path: '/acampamento'
      fullPath: '/acampamento'
      preLoaderRoute: typeof AppAcampamentoRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppAcampamentoRoute: typeof AppAcampamentoRoute
  AppCalendarRoute: typeof AppCalendarRoute
  AppCatalogoAcampamentoRoute: typeof AppCatalogoAcampamentoRoute
  AppDoeRoute: typeof AppDoeRoute
  AppLiveRoute: typeof AppLiveRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppAcampamentoRoute: AppAcampamentoRoute,
  AppCalendarRoute: AppCalendarRoute,
  AppCatalogoAcampamentoRoute: AppCatalogoAcampamentoRoute,
  AppDoeRoute: AppDoeRoute,
  AppLiveRoute: AppLiveRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
